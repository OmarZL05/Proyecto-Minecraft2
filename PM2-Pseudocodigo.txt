Declaracion
    Variables
        Registro de slot
            nombre, tipo: Cadena
        Fin Registro
        Registro de jugador
            nickname, nombre, experiencia: Cadena
            mochila: Arreglo de slot[3]
        Fin Registro        
        Registro de alianza
            nombre: Cadena
            puntosAFavor, puntosEnContra, esmeraldas, registrosConcretados: Entero
            jugadores: Arreglo de jugador[8]
        Fin Registro
        alianzas, top: Arreglo de alianza[4]
        aux: alianza
        i, j: Entero
Inicio
    Para i <-- 1 Hasta 4 Hacer
        Escribir "\nBienvenido, estás a punto de registrar la alianza N.", i
        llamar registrarAlianza(alianzas[i])
    Fin Para

    llamar preTorneo(alianzas)

    llamar iniciarRonda(alianzas[0], alianzas[1], 1)
    llamar iniciarRonda(alianzas[0], alianzas[2], 2)
    llamar iniciarRonda(alianzas[0], alianzas[3], 3)
    llamar iniciarRonda(alianzas[1], alianzas[2], 4)
    llamar iniciarRonda(alianzas[1], alianzas[3], 5)
    llamar iniciarRonda(alianzas[2], alianzas[3], 6)

    Para i <-- 1 Hasta 4 Hacer
        top[i] <-- alianzas[i]
    Fin Para

    Para i <-- 1 Hasta 4 Hacer
        Para j <-- 1 Hasta 4 Hacer
            Si (top[j].esmeraldas < top[j + 1].esmeraldas) Entonces
                aux <-- top[j]
                top[j] <-- top[j + 1]
                top[j + 1] <-- aux
            Si no
                Si (top[j].esmeraldas == top[j + 1].esmeraldas) Entonces
                    Si ( (top[j].puntosAFavor - top[j].puntosEnContra) < (top[j + 1].puntosAFavor - top[j + 1].puntosEnContra)) Entonces
                        aux <-- top[j]
                        top[j] <-- top[j + 1]
                        top[j + 1] <-- aux
                    Fin Si
                Fin Si
            Fin Si
        Fin Para
    Fin Para

    llamar rondaFinal(top[0], top[1]) 

    llamar mostrarPosicionTop(top) 
Fin

Procedimiento registrarAlianza(↓↑ali: alianza)
    Escribir "Indique el nombre de la alianza"
    Leer ali.nombre 
    ali.esmeraldas <-- 0 
    ali.puntosAFavor <-- 0 
    ali.puntosEnContra <-- 0 
    llamar registrarJugadores(ali) 
Fin Procedimiento

Procedimiento registrarJugadores(↓↑ali: alianza)
Declaracion
    Variables
        op: Caracter
        i: Entero
Inicio
    op <-- s
    i <-- 1
    Escribir "Registre a continuacion los integrantes de su equipo"
    Escribir "Nota: El maximo de jugadores es 8"
    Mientras (op == 's' && i < 8) Hacer
        Escribir "Ingrese los datos del jugador ", i
        llamar registrarJugador(ali.jugadores[i]) 
        ali.registrosConcretados <-- ali.registrosConcretados + 1
        Si (i < 7) Entonces
            Escribir "¿Desea registrar otro integrante? [s:si] [otro:no]"
            Leer op 
        Fin Si
        i++ 
    Fin Mientras
Fin Procedimiento

Procedimiento registrarJugador(↓↑jug: jugador)
Declaracion
    Variables
        op: Entero
Inicio
    Escribir "Indique el nombre"
    Leer jug.nombre
    Escribir "Indique el nickname en minecraft: " 
    Leer jug.nickname 
     Escribir "Elija su nivel de experiencia [1: pro] [2: noob]"   
    Repetir
        Leer op 
        Caso (op)
            1:
                jug.experiencia <-- "pro" 
            2:
                jug.experiencia <-- "noob" 
            si no:
                Escribir "Escoja una de las opciones indicadas." 
        Fin Caso
    Mientras (op < 1 || op > 2) 
    
    Escribir "Puedes llevar 3 items en tu mochila."
    Para i <-- 1  Hasta 3 Hacer
        Escribir "Tienes " << 3 - i << " slots libres." 
        Escribir "Indique el item. [pico] [pala] [hacha]" 
        Leer jug.mochila[i].nombre 
        Escribir "Indique el material del item. [madera] [piedra] [oro] [hierro] [diamante]"
        Leer jug.mochila[i].tipo 
    Fin Para
Fin Procedimiento

Procedimiento preTorneo(alianzas: Arreglo de alianza[4])
Declaracion
    Variables
        totalNoobs, totalPros, totalItemsDiamante: Entero
Inicio
    totalNoobs <-- 0
    totalPros <-- 0 
    totalItemsDiamante <-- 0 
    Para i <-- 1 Hasta 4
        totalNoobs <-- totalNoobs + noobsEquipo(alianzas[i]) 
        totalPros <-- totalPros + prosEquipo(alianzas[i]) 
        totalItemsDiamante <-- totalItemsDiamante + itemsDiamanteEquipo(alianzas[i]) 
    Fin Para
    
    Escribir "\nNoobs registrados: ", totalNoobs 
    Escribir "Pros registrados: ", totalPros 
    Escribir "Cantidad de objetos de Diamante: ", totalItemsDiamante  
    Escribir "Personas con pico de diamante en" 
    Para i <-- 1 Hasta 4  
        llamar mostrarPicosDiamantes(alianzas[i]) 
    Fin Para
Fin

Procedimiento mostrarPicosDiamantes(alianza ali)
Declaracion
    Variables
        max, i, j: Entero
        sinPico: Logico
Inicio
    max <-- ali.registrosConcretados
    Escribir ali.nombre << ": " 
    Para i <-- 1 Hasta max
        j <-- 1
        sinPico <-- Verdadero
        Mientras (j < 3 y sinPico = Verdadero) Hacer
            Si (ali.jugadores[i].mochila[j].nombre = "pico" y ali.jugadores[i].mochila[j].tipo = "diamante") Entonces
                Escribir ali.jugadores[i].nombre + " " 
                sinPico <-- Falso 
            Fin Si
            j <-- j+1
        Fin Mientras
    Fin Para
    Escribir "\n" 
Fin Procedimiento

Funcion noobsEquipo(alianza ali): Entero
Declaracion
    Variables
        cantNoobs, max, i: Entero
Inicio
    cantNoobs <-- 0 
    max <-- ali.registrosConcretados 
    Para i <-- 1 Hasta max Hacer    
        Si (ali.jugadores[i].experiencia = "noob") Entonces         
            cantNoobs <-- cantNoobs + 1 
        Fin Si
    Fin Para
    noobsEquipo <-- cantNoobs 
Fin Funcion

Funcion prosEquipo(alianza ali): Entero
Declaracion
    Variables
        cantPros, max, i: Entero
Inicio
    cantPros <-- 0 
    max <-- ali.registrosConcretados 
    Para i <-- 1 Hasta max Hacer    
        Si (ali.jugadores[i].experiencia = "pro") Entonces         
            cantPros <-- cantPros + 1 
        Fin Si
    Fin Para
    prosEquipo <-- cantPros 
Fin Funcion

Funcion itemsDiamanteEquipo(alianza ali): Entero
Declaracion
    Variables
        itemsDiamante, max, i: Entero
Inicio
    itemsDiamante <-- 0
    max <-- ali.registrosConcretados 
    Para i <-- 1 Hasta max Hacer
        Para j <-- 1 Hasta 3 Hacer
            Si (ali.jugadores[i].mochila[j].tipo = "diamante")
                itemsDiamante = itemsDiamante + 1 
            Fin Si
        Fin Para
    Fin Para
    itemsDiamanteEquipo <-- itemsDiamante 
Fin



int equipoMinar(string equipo)
 
     Escribir "\nIndica la cantidad de menas minadas, alianza " << equipo << "."
           
    int cantDiamantes, cantOro, cantHierro 

    cantDiamantes = 0 
    cantOro = 0 
    cantHierro = 0 

     Escribir "Menas de diamantes minadas: " 
    Leer cantDiamantes 
     Escribir "Menas de hierro minadas: " 
    Leer cantHierro 
     Escribir "Menas de oro minadas: " 
    Leer cantOro 

    return (cantDiamantes * 25) + (cantOro * 10) + cantHierro 
}

void mostrarEquipoGanador(alianza equipo, bool final)
 
     Escribir "\nGanador: " << equipo.nombre   
    Si (final == true)
     
         Escribir "Integrantes: "   
        for (int i = 0  i < equipo.registrosConcretados  i++)
         
             Escribir equipo.jugadores[i].nombre << " " 
        }
         Escribir "\nPuntos a favor: " << equipo.puntosAFavor   
         Escribir "Puntos en contra: " << equipo.puntosEnContra   
         Escribir "Average de puntos: " << (equipo.puntosAFavor - equipo.puntosEnContra)   
    }
}

Procedimiento iniciarRonda(↑↓equipo1: alianza, ↑↓equipo2: alianza, ronda: Entero)
Declaracion
    Variables
        ptsEquipo1, ptsEquipo2: Entero
Inicio
    Escribir "Ronda ", ronda, ": ", equipo1.nombre, " vs ", equipo2.nombre 
    ptsEquipo1 <-- equipoMinar(equipo1.nombre) 
    ptsEquipo2 <-- equipoMinar(equipo2.nombre) 

    equipo1.puntosAFavor = equipo1.puntosAFavor + ptsEquipo1 
    equipo1.puntosEnContra = equipo1.puntosEnContra + ptsEquipo2 

    equipo2.puntosAFavor = equipo2.puntosAFavor + ptsEquipo2 
    equipo2.puntosEnContra += equipo2.puntosEnContra + ptsEquipo1 
    
    Si (ptsEquipo1 > ptsEquipo2) Entonces
        equipo1.esmeraldas = equipo1.esmeraldas + 3 
        mostrarEquipoGanador(equipo1, Falso) 
    Fin Si

    Si (ptsEquipo1 < ptsEquipo2) Entonces
        equipo2.esmeraldas = equipo2.esmeraldas + 3 
        mostrarEquipoGanador(equipo2, Falso) 
    Fin Si

    Si (ptsEquipo1 == ptsEquipo2) Entonces
        equipo1.esmeraldas = equipo1.esmeraldas + 1
        equipo2.esmeraldas = equipo2.esmeraldas + 1
        Escribir "Empate."
    Fin Si
     Escribir "\n" 
Fin


Procedimiento rondaFinal(↑↓equipo1: alianza, ↑↓equipo2: alianza)
Declaracion
    Variables
        ptsEquipo1, ptsEquipo2, sobrev1, sobrev2, win: Entero
        op: Caracter
Inicio
    Escribir "Ronda final", ": ", equipo1.nombre, " vs ", equipo2.nombre 
    ptsEquipo1 <-- equipoMinar(equipo1.nombre) 
    ptsEquipo2 <-- equipoMinar(equipo2.nombre) 

    equipo1.puntosAFavor = equipo1.puntosAFavor + ptsEquipo1 
    equipo1.puntosEnContra = equipo1.puntosEnContra + ptsEquipo2 

    equipo2.puntosAFavor = equipo2.puntosAFavor + ptsEquipo2 
    equipo2.puntosEnContra += equipo2.puntosEnContra + ptsEquipo1 
    
    win <-- 0 

    Si (ptsEquipo1 > ptsEquipo2) Entonces
        equipo1.esmeraldas = equipo1.esmeraldas + 3 
        mostrarEquipoGanador(equipo1, Verdadero) 
    Fin Si

    Si (ptsEquipo1 < ptsEquipo2) Entonces
        equipo2.esmeraldas = equipo2.esmeraldas + 3 
        mostrarEquipoGanador(equipo2, Verdadero) 
    Fin Si

    Si (ptsEquipo1 == ptsEquipo2)
     
        Escribir "Ha ocurrido un empate. El primero en encontrar un diamante gana."   
        Escribir "¿Alguno encontro un diamante? [s:si] [otro:no]" 
        Leer op 
        Si (op == 's') Entonces
            Escribir "Que equipo lo encontro primero. [1:Equipo 1] [2:Equipo 2]" 
            Leer win 
            Caso (win)
            1:
                llamar mostrarEquipoGanador(equipo1, Verdadero) 
            2:
                llamar mostrarEquipoGanador(equipo2, Verdadero)
            Fin Caso
        Si no
            Escribir "El PvP fue activo, el equipo con más jugadores ganará"   
            Escribir "¿cuantos sobrevivieron " << equipo1.nombre << "?" 
            Leer sobrev1 
            Escribir "¿cuantos sobrevivieron " << equipo2.nombre << "?" 
            Leer sobrev2 
            Si (sobrev1 > sobrev2) Entonces
                llamar mostrarEquipoGanador(equipo1, Verdadero)
            Sino
                llamar mostrarEquipoGanador(equipo2, Verdadero)
            Fin Si

            Escribir "Sobrevivientes ", equipo1.nombre, ": ", sobrev1   
            Escribir "Sobrevivientes ", equipo2.nombre, ": ", sobrev2   
        Fin Si
    Sino
        Escribir "Sobrevivientes ", equipo1.nombre, ": ", equipo1.registrosConcretados   
        Escribir "Sobrevivientes ", equipo2.nombre, ": ", equipo2.registrosConcretados   
    Fin Si
    Escribir "\n"
Fin

Funcion posicionIntegrante(ali: alianza, nombre: Cadena)  
Declaracion
    Variables
        i: Entero
Inicio
    Para i <-- 1 Hasta ali.registrosConcretados  
        Si (ali.jugadores[i].nickname = nombre) Entonces  
            posicionIntegrante <-- i 
        Fin Si
    Fin Para
    posicionIntegrante <-- -1 
Fin Funcion

Procedimiento mostrarPosicionTop(alianzas: Arreglo de alianza[4])  
Declaracion
    Variables
        nombre: Cadena 
        i, pos: Entero
Inicio 
    i <-- 1 
    pos <-- -1 

    Escribir "Indica un nombre de minecraft para buscar su posicion" 
    Leer nombre 

    Mientras (pos = -1 y i <= 4) Hacer 
        pos <-- posicionIntegrante(alianzas[i], nombre) 
        Si (pos > -1)  
             Escribir "El jugador ", alianzas[i].jugadores[pos].nickname, " quedo en el top ", i   
        Fin Si
        i <-- i+1
    Fin Mientras

    Si (pos = -1) Entonces  
         Escribir "No se ha encontrado al jugador"   
    Fin Si
Fin

